- name: Create web network
  community.docker.docker_network:
    name: web
    state: "{{ 'present' if present else 'absent' }}"
- name: Create traefik volume
  community.docker.docker_volume:
    name: traefik
    state: "{{ 'present' if present else 'absent' }}"
- name: Create traefik container
  register: traefik_container_result
  community.docker.docker_container:
    name: traefik
    image: traefik
    state: "{{ 'started' if present else 'absent' }}"
    container_default_behavior: compatibility
    command:
      # debug
      # - "--log.level=DEBUG"
      # - "--certificatesResolvers.lets-encrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      # redirect HTTP to HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # HTTPS entrypoint
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=lets-encrypt"
      # Let's Encrypt
      - "--certificatesResolvers.lets-encrypt.acme.email=rogryza@gmail.com"
      - "--certificatesResolvers.lets-encrypt.acme.storage=/storage/acme.json"
      - "--certificatesResolvers.lets-encrypt.acme.tlsChallenge=true"
      # docker provider
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.network=web"
      - "--providers.docker.exposedByDefault=false"
    comparisons:
      "*": strict
    mounts:
    - source: traefik
      target: /storage
    - source: /var/run/docker.sock
      target: /var/run/docker.sock
      type: bind
      read_only: true
    network_mode: web
    networks:
    - name: web
    ports:
    - 80:80
    - 443:443
    purge_networks: yes
    restart_policy: unless-stopped

# TODO try to fetch proxy IP when the container task doesn't run
# - name: Fetch postgres container info
#   when: postgres_container_result is skipped
#   tags: always
#   register: postgres_container_result
#   community.docker.docker_container_info:
#     name: postgres
- name: Save proxy IP
  set_fact:
    reverse_proxy:
      ip: "{{ traefik_container_result.container.NetworkSettings.Networks.web.IPAddress }}"
